// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CGA_Server.Models
{
    public partial class CGAContext : DbContext
    {
        public CGAContext()
        {
        }

        public CGAContext(DbContextOptions<CGAContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<Administrator> Administrator { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<GoodScores> GoodScores { get; set; }
        public virtual DbSet<Image> Image { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<QuestionPreset> QuestionPreset { get; set; }
        public virtual DbSet<QuestionPresetBackup> QuestionPresetBackup { get; set; }
        public virtual DbSet<Score> Score { get; set; }
        public virtual DbSet<ScoresWithPlayers> ScoresWithPlayers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=CGA;User Id=admin;Password=Admin;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Creation)
                    .HasColumnName("creation")
                    .HasDefaultValueSql("CURRENT_DATE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(64)
                    .HasColumnName("password");
            });

            modelBuilder.Entity<Administrator>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasColumnName("id");

                entity.Property(e => e.Creation)
                    .HasColumnName("creation")
                    .HasDefaultValueSql("CURRENT_DATE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(64)
                    .HasColumnName("password");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.Cid)
                    .HasName("Country_pkey");

                entity.Property(e => e.Cid).HasColumnName("cid");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .HasColumnName("flag");

                entity.Property(e => e.Iso31661Alpha3Code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("iso3166_1_alpha_3_code");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.NameNative)
                    .HasMaxLength(30)
                    .HasColumnName("name_native");

                entity.Property(e => e.Population).HasColumnName("population");

                entity.Property(e => e.Size).HasColumnName("size");

                entity.HasMany(d => d.Iid)
                    .WithMany(p => p.Cid)
                    .UsingEntity<Dictionary<string, object>>(
                        "CountryHas",
                        l => l.HasOne<Image>().WithMany().HasForeignKey("Iid").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_country_has_image"),
                        r => r.HasOne<Country>().WithMany().HasForeignKey("Cid").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_country_has_country"),
                        j =>
                        {
                            j.HasKey("Cid", "Iid").HasName("Country_has_pkey");

                            j.ToTable("Country_has");

                            j.IndexerProperty<int>("Cid").HasColumnName("cid");

                            j.IndexerProperty<int>("Iid").HasColumnName("iid");
                        });
            });

            modelBuilder.Entity<GoodScores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("good_scores");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Sid).HasColumnName("sid");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.HasKey(e => e.Iid)
                    .HasName("Image_pkey");

                entity.Property(e => e.Iid).HasColumnName("iid");

                entity.Property(e => e.Image1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("image");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.Lid)
                    .HasName("Location_pkey");

                entity.Property(e => e.Lid).HasColumnName("lid");

                entity.Property(e => e.Cid).HasColumnName("cid");

                entity.Property(e => e.Coordinates).HasColumnName("coordinates");

                entity.Property(e => e.Iscapital).HasColumnName("iscapital");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.NameNative)
                    .HasMaxLength(30)
                    .HasColumnName("name_native");

                entity.HasOne(d => d.CidNavigation)
                    .WithMany(p => p.Location)
                    .HasForeignKey(d => d.Cid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_location_country");

                entity.HasMany(d => d.Iid)
                    .WithMany(p => p.Lid)
                    .UsingEntity<Dictionary<string, object>>(
                        "LocationHas",
                        l => l.HasOne<Image>().WithMany().HasForeignKey("Iid").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_location_has_image"),
                        r => r.HasOne<Location>().WithMany().HasForeignKey("Lid").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("fk_location_has_location"),
                        j =>
                        {
                            j.HasKey("Lid", "Iid").HasName("Location_has_pkey");

                            j.ToTable("Location_has");

                            j.IndexerProperty<int>("Lid").HasColumnName("lid");

                            j.IndexerProperty<int>("Iid").HasColumnName("iid");
                        });
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Creation)
                    .HasColumnName("creation")
                    .HasDefaultValueSql("CURRENT_DATE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(64)
                    .HasColumnName("password");

                entity.Property(e => e.PersonalBest).HasColumnName("personal_best");
            });

            modelBuilder.Entity<QuestionPreset>(entity =>
            {
                entity.HasKey(e => e.Qid)
                    .HasName("Question_Preset_pkey");

                entity.ToTable("Question_Preset");

                entity.Property(e => e.Qid).HasColumnName("qid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.Preset)
                    .IsRequired()
                    .HasColumnName("preset");
            });

            modelBuilder.Entity<QuestionPresetBackup>(entity =>
            {
                entity.HasKey(e => e.Qid)
                    .HasName("Question_Preset_Backup_pkey");

                entity.ToTable("Question_Preset_Backup");

                entity.Property(e => e.Qid).HasColumnName("qid");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.Preset)
                    .IsRequired()
                    .HasColumnName("preset");
            });

            modelBuilder.Entity<Score>(entity =>
            {
                entity.HasKey(e => e.Sid)
                    .HasName("Score_pkey");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasDefaultValueSql("CURRENT_DATE");

                entity.Property(e => e.Ishighscore).HasColumnName("ishighscore");

                entity.Property(e => e.Pid).HasColumnName("pid");

                entity.Property(e => e.Score1).HasColumnName("score");

                entity.HasOne(d => d.PidNavigation)
                    .WithMany(p => p.Score)
                    .HasForeignKey(d => d.Pid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_score_player");
            });

            modelBuilder.Entity<ScoresWithPlayers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("scores_with_players");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Sid).HasColumnName("sid");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}